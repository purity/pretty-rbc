diff --git a/kernel/compiler/generator.rb b/kernel/compiler/generator.rb
index a8906b9..d48c24c 100644
--- a/kernel/compiler/generator.rb
+++ b/kernel/compiler/generator.rb
@@ -43,6 +43,7 @@ class Compiler
       @last = nil
 
       @exceptions = []
+      @debug = ENV["RBX_DEBUG_DIR"] ? true : false
     end
 
     attr_reader :cache_size, :literals
@@ -219,6 +220,11 @@ class Compiler
 
       return unless what
 
+      if @debug
+        @ip += 1
+        @stream << :yield_debugger
+      end
+
       @ip += what.size
       if what.size == 1
         @stream << what.first
@@ -229,6 +235,12 @@ class Compiler
 
     def flush
       return unless @last
+
+      if @debug
+        @ip += 1
+        @stream << :yield_debugger
+      end
+
       @ip += @last.size
       if @last.size == 1
         @stream << @last.first
diff --git a/vm/builtin/compiledmethod.cpp b/vm/builtin/compiledmethod.cpp
index 5c69163..f54cf12 100644
--- a/vm/builtin/compiledmethod.cpp
+++ b/vm/builtin/compiledmethod.cpp
@@ -39,6 +39,7 @@ namespace rubinius {
     cm->local_count(state, Fixnum::from(0));
     cm->set_executor(CompiledMethod::default_executor);
     cm->backend_method_ = NULL;
+    cm->breakpoints = NULL;
 
     return cm;
   }
diff --git a/vm/builtin/compiledmethod.hpp b/vm/builtin/compiledmethod.hpp
index dc5b3df..2f11693 100644
--- a/vm/builtin/compiledmethod.hpp
+++ b/vm/builtin/compiledmethod.hpp
@@ -37,7 +37,7 @@ namespace rubinius {
     /* accessors */
 
     VMMethod* backend_method_;
-
+    uint8_t* breakpoints;
 
     attr_accessor(name, Symbol);
     attr_accessor(iseq, InstructionSequence);
diff --git a/vm/builtin/system.cpp b/vm/builtin/system.cpp
index ba5757a..c77844d 100644
--- a/vm/builtin/system.cpp
+++ b/vm/builtin/system.cpp
@@ -43,6 +43,7 @@
 #include "builtin/sendsite.hpp"
 
 #include "instruments/stats.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
 
@@ -157,6 +158,8 @@ namespace rubinius {
 
     if ( -1 == result ) {
       Exception::errno_error(state, "fork() failed!");
+    } else if(result == 0) {
+      pthread_mutex_init(&state->shared.debug->mutex, NULL);
     }
 
     /*  @todo EVFLAG_FORKCHECK should remove need for any maintenance
diff --git a/vm/helpers.cpp b/vm/helpers.cpp
index e3749da..d171d1f 100644
--- a/vm/helpers.cpp
+++ b/vm/helpers.cpp
@@ -22,6 +22,7 @@
 #include "arguments.hpp"
 #include "call_frame.hpp"
 #include "lookup_data.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
   namespace Helpers {
@@ -263,26 +264,7 @@ namespace rubinius {
     }
 
     void yield_debugger(STATE, CallFrame* call_frame) {
-      Channel* chan;
-
-      state->set_call_frame(call_frame);
-
-      chan = try_as<Channel>(G(vm)->get_ivar(state,
-            state->symbol("@debug_channel")));
-
-      if(!chan) return;
-
-      Channel* control = state->thread->control_channel();
-
-      if(control->nil_p()) {
-        control = Channel::create(state);
-        state->thread->control_channel(state, control);
-      }
-
-      sassert(chan->has_readers_p());
-
-      chan->send(state, state->thread.get());
-      control->receive(state, call_frame);
+      state->shared.debug->run(state, call_frame);
     }
   }
 }
diff --git a/vm/shared_state.cpp b/vm/shared_state.cpp
index ffb3eed..1518a65 100644
--- a/vm/shared_state.cpp
+++ b/vm/shared_state.cpp
@@ -5,6 +5,7 @@
 #include "instruments/profiler.hpp"
 #include "global_cache.hpp"
 #include "capi/handle.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
   SharedState::SharedState()
@@ -17,6 +18,7 @@ namespace rubinius {
     , global_cache(0)
     , user_config(0)
   {
+    debug = new Debugger();
     ref();
   }
 
@@ -27,6 +29,7 @@ namespace rubinius {
     delete global_cache;
     delete user_config;
     delete global_handles_;
+    delete debug;
 
 #ifdef ENABLE_LLVM
     if(!reuse_llvm) llvm_cleanup();
diff --git a/vm/shared_state.hpp b/vm/shared_state.hpp
index f4ad680..0ce6762 100644
--- a/vm/shared_state.hpp
+++ b/vm/shared_state.hpp
@@ -25,6 +25,7 @@ namespace rubinius {
   class GlobalCache;
   class ConfigParser;
   class VM;
+  class Debugger;
 
   struct Configuration {
     bool compile_up_front;
@@ -74,6 +75,7 @@ namespace rubinius {
     Interrupts interrupts;
     SymbolTable symbols;
     ConfigParser *user_config;
+    Debugger* debug;
 
   public:
     SharedState();
