diff --git a/kernel/compiler/generator.rb b/kernel/compiler/generator.rb
index d4738a0..7d22742 100644
--- a/kernel/compiler/generator.rb
+++ b/kernel/compiler/generator.rb
@@ -45,6 +45,7 @@ class Compiler
       @last = nil
 
       @exceptions = []
+      @debug = ENV["RBX_DEBUG_DIR"] ? true : false
     end
 
     attr_reader :cache_size, :literals
@@ -221,6 +222,11 @@ class Compiler
 
       return unless what
 
+      if @debug
+        @ip += 1
+        @stream << :yield_debugger
+      end
+
       @ip += what.size
       if what.size == 1
         @stream << what.first
@@ -231,6 +237,12 @@ class Compiler
 
     def flush
       return unless @last
+
+      if @debug
+        @ip += 1
+        @stream << :yield_debugger
+      end
+
       @ip += @last.size
       if @last.size == 1
         @stream << @last.first
diff --git a/vm/builtin/compiledmethod.cpp b/vm/builtin/compiledmethod.cpp
index 3d0bd70..40f122a 100644
--- a/vm/builtin/compiledmethod.cpp
+++ b/vm/builtin/compiledmethod.cpp
@@ -37,6 +37,7 @@ namespace rubinius {
     cm->local_count(state, Fixnum::from(0));
     cm->set_executor(CompiledMethod::default_executor);
     cm->backend_method_ = NULL;
+    cm->breakpoints = NULL;
 
     return cm;
   }
diff --git a/vm/builtin/compiledmethod.hpp b/vm/builtin/compiledmethod.hpp
index dc5b3df..2f11693 100644
--- a/vm/builtin/compiledmethod.hpp
+++ b/vm/builtin/compiledmethod.hpp
@@ -37,7 +37,7 @@ namespace rubinius {
     /* accessors */
 
     VMMethod* backend_method_;
-
+    uint8_t* breakpoints;
 
     attr_accessor(name, Symbol);
     attr_accessor(iseq, InstructionSequence);
diff --git a/vm/builtin/system.cpp b/vm/builtin/system.cpp
index abe3205..94c30ff 100644
--- a/vm/builtin/system.cpp
+++ b/vm/builtin/system.cpp
@@ -43,6 +43,7 @@
 #include "builtin/sendsite.hpp"
 
 #include "instruments/stats.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
 
@@ -157,6 +158,8 @@ namespace rubinius {
 
     if ( -1 == result ) {
       Exception::errno_error(state, "fork() failed!");
+    } else if(result == 0) {
+      pthread_mutex_init(&state->shared.debug->mutex, NULL);
     }
 
     /*  @todo EVFLAG_FORKCHECK should remove need for any maintenance
diff --git a/vm/helpers.cpp b/vm/helpers.cpp
index caf7ac7..0e5e8a0 100644
--- a/vm/helpers.cpp
+++ b/vm/helpers.cpp
@@ -21,6 +21,7 @@
 #include "arguments.hpp"
 #include "call_frame.hpp"
 #include "lookup_data.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
   namespace Helpers {
@@ -271,26 +272,7 @@ namespace rubinius {
     }
 
     void yield_debugger(STATE, CallFrame* call_frame) {
-      Channel* chan;
-
-      state->set_call_frame(call_frame);
-
-      chan = try_as<Channel>(G(vm)->get_ivar(state,
-            state->symbol("@debug_channel")));
-
-      if(!chan) return;
-
-      Channel* control = state->thread->control_channel();
-
-      if(control->nil_p()) {
-        control = Channel::create(state);
-        state->thread->control_channel(state, control);
-      }
-
-      sassert(chan->has_readers_p());
-
-      chan->send(state, state->thread.get());
-      control->receive(state, call_frame);
+      state->shared.debug->run(state, call_frame);
     }
   }
 }
diff --git a/vm/vm.cpp b/vm/vm.cpp
index a3c6e97..be03b4e 100644
--- a/vm/vm.cpp
+++ b/vm/vm.cpp
@@ -49,6 +49,7 @@ namespace rubinius {
     , om(0)
     , global_cache(0)
     , user_config(0)
+    , debug(NULL)
   {}
 
   SharedState::~SharedState() {
diff --git a/vm/vm.hpp b/vm/vm.hpp
index f868678..7638216 100644
--- a/vm/vm.hpp
+++ b/vm/vm.hpp
@@ -104,6 +104,7 @@ namespace rubinius {
   class Waiter;
   class SignalThread;
   class LookupTable;
+  class Debugger;
 
   class SharedState : public RefCount {
   private:
@@ -127,6 +128,7 @@ namespace rubinius {
     Interrupts interrupts;
     SymbolTable symbols;
     ConfigParser *user_config;
+    Debugger* debug;
 
   public:
     SharedState(VMManager& manager, int id);
diff --git a/vm/vm_manager.cpp b/vm/vm_manager.cpp
index 9ae7e6f..7aafac3 100644
--- a/vm/vm_manager.cpp
+++ b/vm/vm_manager.cpp
@@ -1,10 +1,12 @@
 #include "vm_manager.hpp"
 #include "vm.hpp"
+#include "debugger.hpp"
 
 namespace rubinius {
   SharedState* VMManager::create_shared_state() {
     SharedState* shared = new SharedState(*this, share_id_++);
     shares_[shared->id()] = shared;
+    shared->debug = new Debugger();
     return shared;
   }
 
