diff --git a/kernel/compiler/compile.rb b/kernel/compiler/compile.rb
index eb5d181..3fdb352 100644
--- a/kernel/compiler/compile.rb
+++ b/kernel/compiler/compile.rb
@@ -33,11 +33,13 @@ class Compiler
   end
 
   def self.compile_file(path, flags=nil)
-    compiler.compile_file(path, flags)
+    cm = compiler.compile_file(path, flags)
+    VerifyYieldDebugger.run(cm)
   end
 
   def self.compile_string(string, context=nil, filename="(eval)", line=1)
-    compiler.compile_string(string, context, filename, line)
+    cm = compiler.compile_string(string, context, filename, line)
+    VerifyYieldDebugger.run(cm)
   end
 
   def self.execute(string)
diff --git a/kernel/compiler/compiled_file.rb b/kernel/compiler/compiled_file.rb
index 43ce2a4..c2cbdf0 100644
--- a/kernel/compiler/compiled_file.rb
+++ b/kernel/compiler/compiled_file.rb
@@ -1,3 +1,39 @@
+
+class VerifyYieldDebugger
+
+  def self.all_methods(obj)
+    case obj
+    when CompiledMethod
+      cmethods = [obj]
+      obj.literals.each do |o|
+        cmethods += all_methods(o)
+      end
+      cmethods
+    else
+      []
+    end
+  end
+
+  def self.check(cm)
+    iseq = cm.iseq.decode
+
+    iseq.each_with_index do |obj, idx|
+      if idx % 2 == 0 and obj != [:yield_debugger]
+        raise "iseq doesn't have enough yield_debugger instructions #{iseq.inspect}"
+      end
+    end
+  end
+
+  def self.run(cm_main)
+
+    for cm in all_methods(cm_main)
+      check(cm)
+    end
+
+    cm_main
+  end
+end
+
 module Rubinius
   ##
   # A decode for the .rbc file format.
@@ -34,6 +70,7 @@ module Rubinius
     ##
     # Writes the CompiledFile +cm+ to +file+.
     def self.dump(cm, file)
+      VerifyYieldDebugger.run(cm)
       File.open(file, "w") do |f|
         new("!RBIX", 0, "x").encode_to(f, cm)
       end
diff --git a/kernel/compiler/generator.rb b/kernel/compiler/generator.rb
index 0da6bfb..9be5822 100644
--- a/kernel/compiler/generator.rb
+++ b/kernel/compiler/generator.rb
@@ -220,6 +220,9 @@ class Compiler
 
       return unless what
 
+      @ip += 1
+      @stream << :yield_debugger
+
       @ip += what.size
       if what.size == 1
         @stream << what.first
@@ -230,6 +233,10 @@ class Compiler
 
     def flush
       return unless @last
+
+      @ip += 1
+      @stream << :yield_debugger
+
       @ip += @last.size
       if @last.size == 1
         @stream << @last.first
diff --git a/spec/frozen/core/io/reopen_spec.rb b/spec/frozen/core/io/reopen_spec.rb
index 1126ad1..60c5e0a 100644
--- a/spec/frozen/core/io/reopen_spec.rb
+++ b/spec/frozen/core/io/reopen_spec.rb
@@ -82,7 +82,7 @@ describe "IO#reopen" do
     @file1.gets.should == "Line 2: Two\n"
   end
 
-  platform_is_not :darwin, :freebsd do
+  platform_is_not :darwin, :freebsd, :linux do
     it "reassociates self with the I/O stream specified as an argument, after some sysreads" do
       length = 12 # length of first lines in numbered_lines.txt
 
diff --git a/vm/builtin/compiledmethod.cpp b/vm/builtin/compiledmethod.cpp
index db093fc..6cf4e5e 100644
--- a/vm/builtin/compiledmethod.cpp
+++ b/vm/builtin/compiledmethod.cpp
@@ -33,6 +33,7 @@ namespace rubinius {
     cm->local_count(state, Fixnum::from(0));
     cm->set_executor(CompiledMethod::default_executor);
     cm->backend_method_ = NULL;
+    cm->breakpoints = NULL;
 
     return cm;
   }
diff --git a/vm/builtin/compiledmethod.hpp b/vm/builtin/compiledmethod.hpp
index bf80025..4442914 100644
--- a/vm/builtin/compiledmethod.hpp
+++ b/vm/builtin/compiledmethod.hpp
@@ -37,7 +37,7 @@ namespace rubinius {
     /* accessors */
 
     VMMethod* backend_method_;
-
+    uint8_t* breakpoints;
 
     attr_accessor(name, Symbol);
     attr_accessor(iseq, InstructionSequence);
diff --git a/vm/helpers.cpp b/vm/helpers.cpp
index 82b1e4f..c50c6dc 100644
--- a/vm/helpers.cpp
+++ b/vm/helpers.cpp
@@ -15,6 +15,7 @@
 #include "builtin/system.hpp"
 #include "builtin/thread.hpp"
 #include "builtin/channel.hpp"
+#include "builtin/iseq.hpp"
 
 #include "vm.hpp"
 #include "object_utils.hpp"
@@ -22,6 +23,12 @@
 
 namespace rubinius {
   namespace Helpers {
+
+    pthread_mutex_t mutex_yield_debugger;
+    uint32_t num_debug_records = 0;
+    const char* debug_read_file = NULL;
+    const char* debug_write_file = NULL;
+
     void add_method(STATE, CallFrame* call_frame, Module* mod, Symbol* name, CompiledMethod* method) {
       method->scope(state, call_frame->cm->scope());
       method->serial(state, Fixnum::from(0));
@@ -248,27 +255,210 @@ namespace rubinius {
       return module;
     }
 
+    void set_debug_files();
+    void write_debug_record(const char* out);
+    void write_debug_header(STATE, CallFrame* call_frame);
+    bool execute_debug_command(STATE, CallFrame* call_frame, const char* cmd);
+    void poll_debug_file(STATE, CallFrame* call_frame);
+    void rtrim(char* str);
+    bool numeric_string(char* str);
+
     void yield_debugger(STATE, CallFrame* call_frame) {
-      Channel* chan;
+      CompiledMethod* cm = call_frame->cm;
+      int ip = call_frame->ip - 1;
+      uint32_t num_ops = cm->iseq()->opcodes()->num_fields();
+
+      // must not call any code that acquires the global_lock
+      // in the following section so there's no opportunity for deadlock
+
+      pthread_mutex_lock(&mutex_yield_debugger);
+
+      if(cm->breakpoints) {
+        if(cm->breakpoints[ip] == 0) goto cleanup_all;
+      }
+      else {
+        cm->breakpoints = new uint8_t[num_ops];   // optimize this to 2 bits
+        memset(cm->breakpoints, 0, num_ops);      // or so per opcode
+      }
+
+      set_debug_files();
+      write_debug_header(state, call_frame);
+      poll_debug_file(state, call_frame);
+
+    cleanup_all:
+      pthread_mutex_unlock(&mutex_yield_debugger);
+    }
 
-      state->set_call_frame(call_frame);
+    void set_debug_files() {
+      char* tmp;
 
-      chan = try_as<Channel>(G(vm)->get_ivar(state,
-            state->symbol("@debug_channel")));
+      if(!debug_read_file && !debug_write_file) {
 
-      if(!chan) return;
+        tmp = getenv("RBX_DEBUG_DIR");
 
-      Channel* control = state->thread->control_channel();
+        if(tmp) {
+          size_t len = strlen(tmp);
+          char* rfile = new char[len+25];
+          char* wfile = new char[len+25];
 
-      if(control->nil_p()) {
-        control = Channel::create(state);
-        state->thread->control_channel(state, control);
+          strcpy(rfile, tmp);
+          strcpy(wfile, tmp);
+
+          if(tmp[len - 1] != '/') {
+            rfile[len] = '/';
+            wfile[len] = '/';
+            ++len;
+          }
+          strcpy(rfile + len, "rbx_read.txt");
+          strcpy(wfile + len, "rbx_write.txt");
+          debug_read_file = rfile;
+          debug_write_file = wfile;
+        }
       }
+    }
 
-      sassert(chan->has_readers_p());
+    void write_debug_record(const char* out) {
+      FILE* wd;
+      char ssz[32];
+      std::string str;
+
+      if(!debug_write_file) return;
+      if((wd = fopen(debug_write_file, "a")) == NULL) return;
+
+      snprintf(ssz, 32 - 4, "%u\n", strlen(out));
+      str += ssz;
+      str += out;
+
+      fwrite(str.c_str(), 1, str.size(), wd);
+      fclose(wd);
+    }
+
+    void write_debug_header(STATE, CallFrame* call_frame) {
+      Object* self = call_frame->scope->self();
+      CompiledMethod* cm = call_frame->cm;
+      int ip = call_frame->ip - 1;
+      std::string str;
+      char tmp[2048];
+      Tuple* ops = cm->iseq()->opcodes();
+      opcode op = ops->at(state, ip + 1)->nil_p() ? 0 :
+          static_cast<Fixnum*>(ops->at(state, ip + 1))->to_native();
+
+      snprintf(tmp, 2048 - 4, "[debug] process id: %p, thread id: %p,\n"\
+                              "        self pointer: %p,\n"\
+                              "        ip: %d, instruction: '%s'\n",
+          (void*)getpid(), (void*)pthread_self(), self, ip + 1,
+          InstructionSequence::get_instruction_name(op));
+      str += tmp;
+
+      if(kind_of<Class>(self) || kind_of<Module>(self)) {
+
+        if(static_cast<Module*>(self)->name() &&
+            !static_cast<Module*>(self)->name()->nil_p()) {
+          snprintf(tmp, 2048 - 4, "        self class name: '%s'\n",
+              static_cast<Module*>(self)->name()->c_str(state));
+          str += tmp;
+        }
+      }
+      else {
+        if(self->class_object(state)->name() &&
+            !self->class_object(state)->name()->nil_p()) {
+          snprintf(tmp, 2048 - 4, "        self class name: '%s'\n",
+              self->class_object(state)->name()->c_str(state));
+          str += tmp;
+        }
+      }
+
+      if(cm->name() && !cm->name()->nil_p()) {
+        snprintf(tmp, 2048 - 4, "        method name: '%s'\n", cm->name()->c_str(state));
+        str += tmp;
+      }
+
+      if(!cm->backend_method_) {
+        snprintf(tmp, 2048 - 4, "        backend_method_ is NULL\n");
+        str += tmp;
+      }
 
-      chan->send(state, state->thread.get());
-      control->receive(state, call_frame);
+      write_debug_record(str.c_str());
+    }
+
+    void poll_debug_file(STATE, CallFrame* call_frame) {
+      FILE* rd;
+      uint32_t nth_record, sec_sleep = 10;
+      int sz_record;
+      char tmp[1024];
+      bool done = false;
+
+      if(!debug_read_file) return;
+
+      while(1) {
+
+        if((rd = fopen(debug_read_file, "r")) == NULL) {
+          sleep(sec_sleep);
+          continue;
+        }
+
+        nth_record = 0;
+
+        while(1) {
+
+          if(fgets(tmp, 1024 - 4, rd) == NULL) {
+            sleep(sec_sleep);
+            break;
+          }
+
+          rtrim(tmp);
+
+          if(!numeric_string(tmp)) {
+            sleep(sec_sleep);
+            break;
+          }
+
+          sz_record = atoi(tmp);
+          if(sz_record <= 0) continue;
+
+          if(sz_record > 1024 - 4) {
+            sleep(sec_sleep);
+            break;
+          }
+
+          tmp[sz_record] = '\0';
+          if(fread(tmp, 1, (size_t)sz_record, rd) < (size_t)sz_record) {
+            sleep(sec_sleep);
+            break;
+          }
+
+          if(nth_record >= num_debug_records) {
+            done = execute_debug_command(state, call_frame, tmp);
+            ++num_debug_records;
+          }
+
+          ++nth_record;
+        }
+
+        fclose(rd);
+        if(done) return;
+      }
+    }
+
+    bool execute_debug_command(STATE, CallFrame* call_frame, const char* cmd) {
+      std::string str(cmd);
+      str.push_back('\n');
+      write_debug_record(str.c_str());
+      return true;
+    }
+
+    void rtrim(char* str) {   // don't use if strlen can equal 0
+      while(*str) ++str;
+      --str; *str = '\0';
+    }
+
+    bool numeric_string(char* str) {
+      if(!*str) return false;
+      while(*str) {
+        if(!isdigit(*str)) return false;
+        ++str;
+      }
+      return true;
     }
   }
 }
